// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vendor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vendor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vendor {

namespace {

const ::google::protobuf::Descriptor* BidQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vendor_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_vendor_2eproto() {
  protobuf_AddDesc_vendor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vendor.proto");
  GOOGLE_CHECK(file != NULL);
  BidQuery_descriptor_ = file->message_type(0);
  static const int BidQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidQuery, product_name_),
  };
  BidQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidQuery_descriptor_,
      BidQuery::default_instance_,
      BidQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(BidQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidQuery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidQuery, _is_default_instance_));
  BidReply_descriptor_ = file->message_type(1);
  static const int BidReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReply, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReply, vendor_id_),
  };
  BidReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidReply_descriptor_,
      BidReply::default_instance_,
      BidReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(BidReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidReply, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vendor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidQuery_descriptor_, &BidQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidReply_descriptor_, &BidReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vendor_2eproto() {
  delete BidQuery::default_instance_;
  delete BidQuery_reflection_;
  delete BidReply::default_instance_;
  delete BidReply_reflection_;
}

void protobuf_AddDesc_vendor_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_vendor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014vendor.proto\022\006vendor\" \n\010BidQuery\022\024\n\014pr"
    "oduct_name\030\001 \001(\t\",\n\010BidReply\022\r\n\005price\030\001 "
    "\001(\001\022\021\n\tvendor_id\030\002 \001(\t2\?\n\006Vendor\0225\n\rgetP"
    "roductBid\022\020.vendor.BidQuery\032\020.vendor.Bid"
    "Reply\"\000b\006proto3", 175);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vendor.proto", &protobuf_RegisterTypes);
  BidQuery::default_instance_ = new BidQuery();
  BidReply::default_instance_ = new BidReply();
  BidQuery::default_instance_->InitAsDefaultInstance();
  BidReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vendor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vendor_2eproto {
  StaticDescriptorInitializer_vendor_2eproto() {
    protobuf_AddDesc_vendor_2eproto();
  }
} static_descriptor_initializer_vendor_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidQuery::kProductNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidQuery::BidQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vendor.BidQuery)
}

void BidQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BidQuery::BidQuery(const BidQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vendor.BidQuery)
}

void BidQuery::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BidQuery::~BidQuery() {
  // @@protoc_insertion_point(destructor:vendor.BidQuery)
  SharedDtor();
}

void BidQuery::SharedDtor() {
  product_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidQuery_descriptor_;
}

const BidQuery& BidQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vendor_2eproto();
  return *default_instance_;
}

BidQuery* BidQuery::default_instance_ = NULL;

BidQuery* BidQuery::New(::google::protobuf::Arena* arena) const {
  BidQuery* n = new BidQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:vendor.BidQuery)
  product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BidQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vendor.BidQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string product_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_name().data(), this->product_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vendor.BidQuery.product_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vendor.BidQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vendor.BidQuery)
  return false;
#undef DO_
}

void BidQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vendor.BidQuery)
  // optional string product_name = 1;
  if (this->product_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_name().data(), this->product_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vendor.BidQuery.product_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:vendor.BidQuery)
}

::google::protobuf::uint8* BidQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vendor.BidQuery)
  // optional string product_name = 1;
  if (this->product_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_name().data(), this->product_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vendor.BidQuery.product_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->product_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vendor.BidQuery)
  return target;
}

int BidQuery::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vendor.BidQuery)
  int total_size = 0;

  // optional string product_name = 1;
  if (this->product_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vendor.BidQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vendor.BidQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vendor.BidQuery)
    MergeFrom(*source);
  }
}

void BidQuery::MergeFrom(const BidQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vendor.BidQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.product_name().size() > 0) {

    product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_name_);
  }
}

void BidQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vendor.BidQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidQuery::CopyFrom(const BidQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vendor.BidQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidQuery::IsInitialized() const {

  return true;
}

void BidQuery::Swap(BidQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidQuery::InternalSwap(BidQuery* other) {
  product_name_.Swap(&other->product_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidQuery_descriptor_;
  metadata.reflection = BidQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BidQuery

// optional string product_name = 1;
void BidQuery::clear_product_name() {
  product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BidQuery::product_name() const {
  // @@protoc_insertion_point(field_get:vendor.BidQuery.product_name)
  return product_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidQuery::set_product_name(const ::std::string& value) {
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vendor.BidQuery.product_name)
}
 void BidQuery::set_product_name(const char* value) {
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vendor.BidQuery.product_name)
}
 void BidQuery::set_product_name(const char* value, size_t size) {
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vendor.BidQuery.product_name)
}
 ::std::string* BidQuery::mutable_product_name() {
  
  // @@protoc_insertion_point(field_mutable:vendor.BidQuery.product_name)
  return product_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidQuery::release_product_name() {
  // @@protoc_insertion_point(field_release:vendor.BidQuery.product_name)
  
  return product_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidQuery::set_allocated_product_name(::std::string* product_name) {
  if (product_name != NULL) {
    
  } else {
    
  }
  product_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_name);
  // @@protoc_insertion_point(field_set_allocated:vendor.BidQuery.product_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidReply::kPriceFieldNumber;
const int BidReply::kVendorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidReply::BidReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vendor.BidReply)
}

void BidReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BidReply::BidReply(const BidReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vendor.BidReply)
}

void BidReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  price_ = 0;
  vendor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BidReply::~BidReply() {
  // @@protoc_insertion_point(destructor:vendor.BidReply)
  SharedDtor();
}

void BidReply::SharedDtor() {
  vendor_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidReply_descriptor_;
}

const BidReply& BidReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vendor_2eproto();
  return *default_instance_;
}

BidReply* BidReply::default_instance_ = NULL;

BidReply* BidReply::New(::google::protobuf::Arena* arena) const {
  BidReply* n = new BidReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidReply::Clear() {
// @@protoc_insertion_point(message_clear_start:vendor.BidReply)
  price_ = 0;
  vendor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BidReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vendor.BidReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double price = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vendor_id;
        break;
      }

      // optional string vendor_id = 2;
      case 2: {
        if (tag == 18) {
         parse_vendor_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vendor_id().data(), this->vendor_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vendor.BidReply.vendor_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vendor.BidReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vendor.BidReply)
  return false;
#undef DO_
}

void BidReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vendor.BidReply)
  // optional double price = 1;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->price(), output);
  }

  // optional string vendor_id = 2;
  if (this->vendor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendor_id().data(), this->vendor_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vendor.BidReply.vendor_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vendor_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:vendor.BidReply)
}

::google::protobuf::uint8* BidReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vendor.BidReply)
  // optional double price = 1;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->price(), target);
  }

  // optional string vendor_id = 2;
  if (this->vendor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendor_id().data(), this->vendor_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vendor.BidReply.vendor_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vendor_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vendor.BidReply)
  return target;
}

int BidReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vendor.BidReply)
  int total_size = 0;

  // optional double price = 1;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // optional string vendor_id = 2;
  if (this->vendor_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vendor_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vendor.BidReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vendor.BidReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vendor.BidReply)
    MergeFrom(*source);
  }
}

void BidReply::MergeFrom(const BidReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vendor.BidReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.vendor_id().size() > 0) {

    vendor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_id_);
  }
}

void BidReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vendor.BidReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidReply::CopyFrom(const BidReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vendor.BidReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidReply::IsInitialized() const {

  return true;
}

void BidReply::Swap(BidReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidReply::InternalSwap(BidReply* other) {
  std::swap(price_, other->price_);
  vendor_id_.Swap(&other->vendor_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidReply_descriptor_;
  metadata.reflection = BidReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BidReply

// optional double price = 1;
void BidReply::clear_price() {
  price_ = 0;
}
 double BidReply::price() const {
  // @@protoc_insertion_point(field_get:vendor.BidReply.price)
  return price_;
}
 void BidReply::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:vendor.BidReply.price)
}

// optional string vendor_id = 2;
void BidReply::clear_vendor_id() {
  vendor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BidReply::vendor_id() const {
  // @@protoc_insertion_point(field_get:vendor.BidReply.vendor_id)
  return vendor_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidReply::set_vendor_id(const ::std::string& value) {
  
  vendor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vendor.BidReply.vendor_id)
}
 void BidReply::set_vendor_id(const char* value) {
  
  vendor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vendor.BidReply.vendor_id)
}
 void BidReply::set_vendor_id(const char* value, size_t size) {
  
  vendor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vendor.BidReply.vendor_id)
}
 ::std::string* BidReply::mutable_vendor_id() {
  
  // @@protoc_insertion_point(field_mutable:vendor.BidReply.vendor_id)
  return vendor_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidReply::release_vendor_id() {
  // @@protoc_insertion_point(field_release:vendor.BidReply.vendor_id)
  
  return vendor_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidReply::set_allocated_vendor_id(::std::string* vendor_id) {
  if (vendor_id != NULL) {
    
  } else {
    
  }
  vendor_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor_id);
  // @@protoc_insertion_point(field_set_allocated:vendor.BidReply.vendor_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace vendor

// @@protoc_insertion_point(global_scope)
