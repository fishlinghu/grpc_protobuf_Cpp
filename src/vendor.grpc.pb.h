// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: vendor.proto
#ifndef GRPC_vendor_2eproto__INCLUDED
#define GRPC_vendor_2eproto__INCLUDED

#include "vendor.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace vendor {

class Vendor GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get product bid
    virtual ::grpc::Status getProductBid(::grpc::ClientContext* context, const ::vendor::BidQuery& request, ::vendor::BidReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vendor::BidReply>> AsyncgetProductBid(::grpc::ClientContext* context, const ::vendor::BidQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vendor::BidReply>>(AsyncgetProductBidRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vendor::BidReply>* AsyncgetProductBidRaw(::grpc::ClientContext* context, const ::vendor::BidQuery& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status getProductBid(::grpc::ClientContext* context, const ::vendor::BidQuery& request, ::vendor::BidReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vendor::BidReply>> AsyncgetProductBid(::grpc::ClientContext* context, const ::vendor::BidQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vendor::BidReply>>(AsyncgetProductBidRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::vendor::BidReply>* AsyncgetProductBidRaw(::grpc::ClientContext* context, const ::vendor::BidQuery& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_getProductBid_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get product bid
    virtual ::grpc::Status getProductBid(::grpc::ServerContext* context, const ::vendor::BidQuery* request, ::vendor::BidReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getProductBid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getProductBid() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getProductBid() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProductBid(::grpc::ServerContext* context, const ::vendor::BidQuery* request, ::vendor::BidReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetProductBid(::grpc::ServerContext* context, ::vendor::BidQuery* request, ::grpc::ServerAsyncResponseWriter< ::vendor::BidReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getProductBid<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_getProductBid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getProductBid() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getProductBid() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProductBid(::grpc::ServerContext* context, const ::vendor::BidQuery* request, ::vendor::BidReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace vendor


#endif  // GRPC_vendor_2eproto__INCLUDED
