// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: store.proto

#include "store.pb.h"
#include "store.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace store {

static const char* Store_method_names[] = {
  "/store.Store/getProducts",
};

std::unique_ptr< Store::Stub> Store::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Store::Stub> stub(new Store::Stub(channel));
  return stub;
}

Store::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_getProducts_(Store_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Store::Stub::getProducts(::grpc::ClientContext* context, const ::store::ProductQuery& request, ::store::ProductReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_getProducts_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::store::ProductReply>* Store::Stub::AsyncgetProductsRaw(::grpc::ClientContext* context, const ::store::ProductQuery& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::store::ProductReply>(channel_.get(), cq, rpcmethod_getProducts_, context, request);
}

Store::Service::Service() {
  (void)Store_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Store_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Store::Service, ::store::ProductQuery, ::store::ProductReply>(
          std::mem_fn(&Store::Service::getProducts), this)));
}

Store::Service::~Service() {
}

::grpc::Status Store::Service::getProducts(::grpc::ServerContext* context, const ::store::ProductQuery* request, ::store::ProductReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace store

